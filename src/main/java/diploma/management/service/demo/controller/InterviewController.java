package diploma.management.service.demo.controller;

import diploma.management.service.demo.dto.ChatRequest;
import diploma.management.service.demo.dto.ChatResponse;
import diploma.management.service.demo.entity.InterviewMessage;
import diploma.management.service.demo.entity.InterviewResult;
import diploma.management.service.demo.repository.InterviewResultRepository;
import diploma.management.service.demo.service.FlaskInterviewService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j // –õ–æ–º–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@RestController
@RequestMapping("/api/interview")
public class InterviewController {

    private final FlaskInterviewService flaskInterviewService;
    private final InterviewResultRepository interviewResultRepository;

    public InterviewController(FlaskInterviewService flaskInterviewService,
                               InterviewResultRepository interviewResultRepository) {
        this.flaskInterviewService = flaskInterviewService;
        this.interviewResultRepository = interviewResultRepository;
    }

    // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
//    @PostMapping("/start")
//    public String startInterview(@RequestParam(value = "sessionId", required = false) Long sessionId,
//                                 @RequestBody String userMessage) {
//        // –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ Flask –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
//        return flaskInterviewService.startInterview(sessionId, userMessage);
//    }

    @PostMapping
    public String startInterview(@RequestParam(value = "sessionId", required = false) Long sessionId,
                                 @RequestBody ChatRequest request) {
        return flaskInterviewService.startInterview(sessionId, request.getMessage());
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
    @GetMapping("/session/{sessionId}")
    public List<InterviewMessage> getSessionMessages(@PathVariable Long sessionId) {
        return flaskInterviewService.getSessionMessages(sessionId);
    }

    // üî• –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
    @PostMapping("/finish")
    public ResponseEntity<ChatResponse> finishInterview(Authentication authentication) {
        log.info("–ú–µ—Ç–æ–¥ finishInterview –≤—ã–∑–≤–∞–Ω");
        String username = authentication.getName();
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        // –°—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã—Ç—è–Ω—É—Ç—å –æ—Ü–µ–Ω–∫—É –∏–∑ Flask:
        // double score = flaskInterviewService.getScoreForUser(username);
        double score = Math.random() * 100; // –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π score
        log.info("–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {}", score);

        InterviewResult result = new InterviewResult();
        result.setUsername(username);
        result.setScore(score);
        result.setTimestamp(LocalDateTime.now());  // –µ—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏–ª –ø–æ–ª–µ timestamp

        interviewResultRepository.save(result);
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

        ChatResponse response = new ChatResponse();
        response.setResponse("–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ü–µ–Ω–∫–∞: " + score);
        return ResponseEntity.ok(response);
    }



    @GetMapping("/results")
    public ResponseEntity<List<InterviewResult>> getInterviewResults(Authentication authentication) {
        String username = authentication.getName();
        List<InterviewResult> results = interviewResultRepository.findByUsernameOrderByTimestampAsc(username);
        return ResponseEntity.ok(results);
    }

}
